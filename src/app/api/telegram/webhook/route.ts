import { Telegraf, Markup } from "telegraf"; // –î–æ–¥–∞—î–º–æ Markup –¥–ª—è –∫–Ω–æ–ø–æ–∫
import { NextResponse } from "next/server";
import Deposit from "@/models/Deposit";
import Withdrawal from "@/models/Withdrawal";
import User from "@/models/User";
import connectDB from "@/utils/connectDB";
import Operations from "@/models/Operations";

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || "");

// –ó‚Äô—î–¥–Ω—É—î–º–æ—Å—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞
bot.use(async (ctx, next) => {
  await connectDB();
  next();
});

// Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è chat ID (–∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è –¥–µ–±–∞–≥—É)
bot.use(async (ctx, next) => {
    const adminChatId = process.env.TELEGRAM_ADMIN_CHAT_ID;
  console.log("Chat ID:", ctx.chat?.id);
  console.log("Chat ID admin:", adminChatId);
  next();
});

// –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏
bot.command("start", async (ctx) => {
  await ctx.reply(
    "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
    Markup.inlineKeyboard([
      [Markup.button.callback("–û—Ç—Ä–∏–º–∞—Ç–∏ —é–∑–µ—Ä—ñ–≤", "getusers")],
      [Markup.button.callback("–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", "getdeposits")],
      [Markup.button.callback("–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è", "getwithdrawals")],
    ])
  );
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∏–º–∞—Ç–∏ —é–∑–µ—Ä—ñ–≤"
bot.action("getusers", async (ctx) => {
  try {
    const users = await User.find().sort({ createdAt: -1 });
    if (!users.length) {
      await ctx.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
      return;
    }

    let response = "–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n";
    users.forEach((user, index) => {
      response += `${index + 1}. –Ü–º‚Äô—è: ${user.firstName} ${user.lastName}\n`;
      response += `   –ù–∏–∫–Ω–µ–π–º: ${user.username}\n`;
      response += `   Email: ${user.email}\n`;
      response += `   –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n`;
      response += `   –¢–µ–ª–µ–≥—Ä–∞–º: ${user.telegramId || "-"} \n`;
      response += `   –ë–∞–ª–∞–Ω—Å: ${Object.entries(user.balance || {}).map(([curr, amt]) => `${curr}: ${amt}`).join(", ")}\n\n`;
    });

    if (response.length > 4096) {
      response = response.substring(0, 4095) + "...";
    }

    await ctx.reply(response);
    await ctx.answerCbQuery(); // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
  } catch (error) {
    console.error("Error getting users:", error);
    await ctx.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.");
    await ctx.answerCbQuery();
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è" –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è" –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
bot.action("getdeposits", async (ctx) => {
  try {
    const deposits = await Deposit.find({ status: "pending" });
    if (!deposits.length) {
      await ctx.reply("–î–µ–ø–æ–∑–∏—Ç–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'pending' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
      return;
    }

    // –¢–∏–ø—ñ–∑–∞—Ü—ñ—è –¥–ª—è messages: —Ä—è–¥–æ–∫ –∞–±–æ –æ–±‚Äô—î–∫—Ç —ñ–∑ —Ç–µ–∫—Å—Ç–æ–º —ñ –∫–Ω–æ–ø–∫–∞–º–∏
    const messages: (string | { text: string; reply_markup: ReturnType<typeof Markup.inlineKeyboard> })[] = [];
    let response: string = "–°–ø–∏—Å–æ–∫ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤ (pending):\n\n";

    deposits.forEach((deposit, index) => {
      const depositInfo: string = `${index + 1}. ID: ${deposit.id}\n` +
        `   –í–∞–ª—é—Ç–∞: ${deposit.currency}\n` +
        `   –°—É–º–∞: ${deposit.amount} USD\n` +
        `   –°—Ç–∞—Ç—É—Å: ${deposit.status}\n` +
        `   –î–∞—Ç–∞: ${new Date(deposit.createdAt).toLocaleString()}\n\n`;

      if (response.length + depositInfo.length > 4000) { // –ó–∞–ª–∏—à–∞—î–º–æ –∑–∞–ø–∞—Å –ø—ñ–¥ –∫–Ω–æ–ø–∫–∏
        messages.push(response);
        response = "–°–ø–∏—Å–æ–∫ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤ (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è):\n\n" + depositInfo;
      } else {
        response += depositInfo;
      }

      // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—É –≤ –∫—ñ–Ω—Ü—ñ —Å–ø–∏—Å–∫—É
      if ((index + 1) === deposits.length || response.length > 4000) {
        messages.push({
          text: response,
          reply_markup: Markup.inlineKeyboard(
            deposits.slice(messages.length * 10, (messages.length + 1) * 10).map(dep => [
              Markup.button.callback("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", `confirm_${dep.id}`),
              Markup.button.callback("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏", `reject_${dep.id}`),
            ])
          ),
        });
        response = "–°–ø–∏—Å–æ–∫ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤ (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è):\n\n";
      }
    });

    for (const msg of messages) {
      if (typeof msg === "string") {
        await ctx.reply(msg);
      } else {
        await ctx.reply(msg.text, msg.reply_markup);
      }
    }

    await ctx.answerCbQuery();
  } catch (error) {
    console.error("Error getting deposits:", error);
    await ctx.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –¥–µ–ø–æ–∑–∏—Ç—ñ–≤.");
    await ctx.answerCbQuery();
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è"
bot.action("getwithdrawals", async (ctx) => {
  try {
    const withdrawals = await Withdrawal.find().sort({ createdAt: -1 });
    if (!withdrawals.length) {
      await ctx.reply("–í–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
      return;
    }

    let response = "–°–ø–∏—Å–æ–∫ –≤–∏–≤–µ–¥–µ–Ω—å:\n\n";
    withdrawals.forEach((withdrawal, index) => {
      response += `${index + 1}. ID: ${withdrawal.id}\n`;
      response += `   –í–∞–ª—é—Ç–∞: ${withdrawal.currency}\n`;
      response += `   –°—É–º–∞: ${withdrawal.amount} USD\n`;
      response += `   –°—Ç–∞—Ç—É—Å: ${withdrawal.status}\n`;
      response += `   –ì–∞–º–∞–Ω–µ—Ü—å: ${withdrawal.waletId}\n`;
      response += `   –î–∞—Ç–∞: ${new Date(withdrawal.createdAt).toLocaleString()}\n\n`;
    });

    if (response.length > 4096) {
      response = response.substring(0, 4095) + "...";
    }

    await ctx.reply(response);
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("Error getting withdrawals:", error);
    await ctx.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –≤–∏–≤–µ–¥–µ–Ω—å.");
    await ctx.answerCbQuery();
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏" –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç—ñ–≤
bot.action(/confirm_(.+)/, async (ctx) => {
  const transactionId = ctx.match[1];
  try {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–µ–ø–æ–∑–∏—Ç
    const deposit = await Deposit.findOne({ id: transactionId });
    if (!deposit) {
      await ctx.reply("–î–µ–ø–æ–∑–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return ctx.answerCbQuery();
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
    if (deposit.status !== "pending") {
      await ctx.reply(`–î–µ–ø–æ–∑–∏—Ç ${transactionId} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.`);
      return ctx.answerCbQuery();
    }

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const user = await User.findById(deposit.userId);
    if (!user) {
      await ctx.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.");
      return ctx.answerCbQuery();
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
    const currency = deposit.currency || "USDT";
    const currentBalance = user.balance.get(currency) || 0;
    user.balance.set(currency, currentBalance + deposit.amount);
    await user.save();

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç—É
    deposit.status = "confirmed";
    await deposit.save();

    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
    const newOperation = new Operations({
      id: deposit.userId,
      description: "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É",
      amount: deposit.amount,
      currency: currency,
      type: "deposit",
      createdAt: new Date(),
    });
    await newOperation.save();

    await ctx.reply(
      `‚úÖ –î–µ–ø–æ–∑–∏—Ç ${transactionId} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n` +
      `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${user.email}\n` +
      `–°—É–º–∞: ${deposit.amount} ${currency}`
    );
    
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:", error);
    await ctx.reply("üö´ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É");
    await ctx.answerCbQuery();
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏" –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç—ñ–≤
bot.action(/reject_(.+)/, async (ctx) => {
  const transactionId = ctx.match[1];
  try {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–µ–ø–æ–∑–∏—Ç
    const deposit = await Deposit.findOne({ id: transactionId });
    if (!deposit) {
      await ctx.reply("–î–µ–ø–æ–∑–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return ctx.answerCbQuery();
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
    if (deposit.status !== "pending") {
      await ctx.reply(`–î–µ–ø–æ–∑–∏—Ç ${transactionId} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.`);
      return ctx.answerCbQuery();
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
    deposit.status = "rejected";
    await deposit.save();

    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
    const newOperation = new Operations({
      id: deposit.userId,
      description: "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ",
      amount: deposit.amount,
      currency: deposit.currency || "USDT",
      type: "deposit",
      createdAt: new Date(),
    });
    await newOperation.save();

    await ctx.reply(
      `‚ùå –î–µ–ø–æ–∑–∏—Ç ${transactionId} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!\n` +
      `–ü—Ä–∏—á–∏–Ω–∞: –∑–∞–ø–∏—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`
    );
    
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è:", error);
    await ctx.reply("üö´ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É");
    await ctx.answerCbQuery();
  }
});

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Next.js API
export async function POST(req: Request) {
  const body = await req.json();
  await bot.handleUpdate(body);
  return NextResponse.json({ status: "ok" });
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ (–≤–∏–∫–ª–∏–∫–∞—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑ —á–µ—Ä–µ–∑ GET)
export async function GET() {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const webhookUrl = `${process.env.VERCEL_URL}/api/telegram/webhook`;

    if (!botToken) {
      return NextResponse.json({ error: "Telegram bot token is missing" }, { status: 500 });
    }

    await bot.telegram.setWebhook(webhookUrl);
    return NextResponse.json({ success: true, message: "Webhook set successfully" });
  } catch (error) {
    console.error("Error setting webhook:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}