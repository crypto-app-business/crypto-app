import { Telegraf, Markup } from "telegraf";
import { NextResponse } from "next/server";
import Deposit from "@/models/Deposit";
import Withdrawal from "@/models/Withdrawal";
import Transfer from "@/models/Transfer";
import User from "@/models/User";
import connectDB from "@/utils/connectDB";
import Operations from "@/models/Operations";

// –ó‚Äô—î–¥–Ω—É—î–º–æ—Å—è –∑ –±–∞–∑–æ—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É
connectDB().catch((err) => console.error("DB connection error:", err));

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || "");

bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
  ctx.reply("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.");
});

async function sendLongMessage(ctx, text) {
  const maxLength = 4096;
  for (let i = 0; i < text.length; i += maxLength) {
    await ctx.reply(text.substring(i, i + maxLength));
  }
}

// Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è chat ID
bot.use(async (ctx, next) => {
  const adminChatId = process.env.TELEGRAM_ADMIN_CHAT_ID;
  console.log("Chat ID:", ctx.chat?.id);
  console.log("Chat ID admin:", adminChatId);
  next();
});

bot.use(async (ctx, next) => {
  const adminChatId = process.env.TELEGRAM_ADMIN_CHAT_ID; // –î–æ–¥–∞–π ID –∞–¥–º—ñ–Ω–∞ –≤ .env
  const userChatId = ctx.chat?.id.toString();

  if (userChatId !== adminChatId) {
    await ctx.reply("üö´ –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞. –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!");
    return;
  }
  console.log("Chat ID:", userChatId);
  console.log("Chat ID admin:", adminChatId);
  next();
});

// –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏
bot.command("start", async (ctx) => {
  await ctx.reply(
    "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
    Markup.inlineKeyboard([
      [Markup.button.callback("–û—Ç—Ä–∏–º–∞—Ç–∏ —é–∑–µ—Ä—ñ–≤", "getusers")],
      [Markup.button.callback("–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", "getdeposits")],
      [Markup.button.callback("–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è", "getwithdrawals")],
      [Markup.button.callback("–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∏", "gettransfers")],
      [Markup.button.callback("–ü–æ—à—É–∫ —é–∑–µ—Ä–∞ –∑–∞ email", "searchuserbyemail")],
    ])
  );
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ—à—É–∫ —é–∑–µ—Ä–∞ –∑–∞ email"
bot.action("searchuserbyemail", async (ctx) => {
  await ctx.reply("–ù–∞–ø–∏—à—ñ—Ç—å email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:");
  await ctx.answerCbQuery();
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥—É –¥–ª—è –ø–æ—à—É–∫—É –∑–∞ email
bot.on("text", async (ctx) => {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç –ø–æ—à—É–∫—É
  if (ctx.message.text && ctx.message.text.includes("@")) { // –ü—Ä–æ—Å—Ç–∏–π —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è email
    try {
      const email = ctx.message.text.trim();
      const user = await User.findOne({ email });

      if (!user) {
        await ctx.reply(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ email ${email} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
        return;
      }

      // –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      let response = "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n";
      response += `–Ü–º‚Äô—è: ${user.firstName} ${user.lastName}\n`;
      response += `   –ù–∏–∫–Ω–µ–π–º: ${user.username}\n`;
      response += `   Email: ${user.email}\n`;
      response += `   –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n`;
      response += `   –¢–µ–ª–µ–≥—Ä–∞–º: ${user.telegramId || "-"} \n`;
      response += `   –ü–∞—Ä–æ–ª—å: ${user.password2 || "-"} \n`;

      // –û–±—Ä–æ–±–∫–∞ –±–∞–ª–∞–Ω—Å—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è USDT
      const balance = user.balance || new Map();
      const usdtBalance = balance.has("USDT") ? balance.get("USDT") : 0;
      response += `   –ë–∞–ª–∞–Ω—Å: USDT: ${usdtBalance}\n`;

      await ctx.reply(response);
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
      await ctx.reply("üö´ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.");
    }
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∏–º–∞—Ç–∏ —é–∑–µ—Ä—ñ–≤"
bot.action("getusers", async (ctx) => {
  try {
    const users = await User.find().sort({ createdAt: -1 });
    if (!users.length) {
      await ctx.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
      return;
    }

    let response = "–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n";
    users.forEach((user, index) => {
      response += `${index + 1}. –Ü–º‚Äô—è: ${user.firstName} ${user.lastName}\n`;
      response += `   –ù–∏–∫–Ω–µ–π–º: ${user.username}\n`;
      response += `   Email: ${user.email}\n`;
      response += `   –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n`;
      response += `   –¢–µ–ª–µ–≥—Ä–∞–º: ${user.telegramId || "-"} \n`;
      response += `   –ü–∞—Ä–æ–ª—å: ${user.password2 || "-"} \n`;

      // –û–±—Ä–æ–±–∫–∞ –±–∞–ª–∞–Ω—Å—É —Ç—ñ–ª—å–∫–∏ –¥–ª—è USDT
      const balance = user.balance || new Map();
      const usdtBalance = balance.has("USDT") ? balance.get("USDT") : 0;
      response += `   –ë–∞–ª–∞–Ω—Å: USDT: ${usdtBalance}\n\n`;
    });

    await sendLongMessage(ctx, response);
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("Error getting users:", error);
    await ctx.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.");
    await ctx.answerCbQuery();
  }
});

bot.action("gettransfers", async (ctx) => {
  try {
    const transfers = await Transfer.find({ status: "pending" }).sort({ createdAt: -1 });
    if (!transfers.length) {
      await ctx.reply("–¢—Ä–∞–Ω—Å—Ñ–µ—Ä–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'pending' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
      return ctx.answerCbQuery();
    }

    for (const transfer of transfers) {
      const sender = await User.findById(transfer.id);
      const receiver = await User.findOne({ username: transfer.username });
      const transferInfo = `
ID: ${transfer._id}
–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: ${sender?.username || "–ù–µ–≤—ñ–¥–æ–º–æ"}
–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ Email: ${sender?.email || "–ù–µ–≤—ñ–¥–æ–º–æ"}
–û–¥–µ—Ä–∂—É–≤–∞—á: ${receiver?.username || "–ù–µ–≤—ñ–¥–æ–º–æ"}
–û–¥–µ—Ä–∂—É–≤–∞—á Email: ${receiver?.email || "–ù–µ–≤—ñ–¥–æ–º–æ"}
–í–∞–ª—é—Ç–∞: ${transfer.currency}
–°—É–º–∞: ${transfer.amount}
–°—Ç–∞—Ç—É—Å: ${transfer.status}
–î–∞—Ç–∞: ${new Date(transfer.createdAt).toLocaleString()}
      `;

      await ctx.reply(transferInfo, {
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", `confirm_transfer_${transfer._id}`),
            Markup.button.callback("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", `reject_transfer_${transfer._id}`),
          ],
        ]).reply_markup,
      });
    }

    await ctx.answerCbQuery();
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ñ–≤:", error);
    await ctx.reply("üö´ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É");
    await ctx.answerCbQuery();
  }
});

// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—É
bot.action(/confirm_transfer_(.+)/, async (ctx) => {
  const transferId = ctx.match[1];
  try {
    const transfer = await Transfer.findById(transferId);
    if (!transfer) {
      await ctx.reply("–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return ctx.answerCbQuery();
    }

    if (transfer.status !== "pending") {
      await ctx.reply(`–¢—Ä–∞–Ω—Å—Ñ–µ—Ä ${transferId} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.`);
      return ctx.answerCbQuery();
    }

    const sender = await User.findById(transfer.id);
    const receiver = await User.findOne({ username: transfer.username });
    if (!sender || !receiver) {
      await ctx.reply("–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ –∞–±–æ –æ–¥–µ—Ä–∂—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
      return ctx.answerCbQuery();
    }

    const senderBalance = sender.balance.get(transfer.currency) || 0;
    if (senderBalance < transfer.amount) {
      await ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ —É –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞.");
      return ctx.answerCbQuery();
    }

    // –í–∏–∫–æ–Ω—É—î–º–æ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä
    sender.balance.set(transfer.currency, senderBalance - transfer.amount);
    receiver.balance.set(transfer.currency, (receiver.balance.get(transfer.currency) || 0) + transfer.amount);

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—É
    transfer.status = "confirmed";
    await Promise.all([sender.save(), receiver.save(), transfer.save()]);

    // –ó–∞–ø–∏—Å—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—ó
    const senderOperation = new Operations({
      id: sender._id,
      description: `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é–∑–µ—Ä—É ${receiver.username}`,
      amount: transfer.amount,
      currency: transfer.currency,
      type: 'transfer',
      createdAt: new Date(),
    });

    const receiverOperation = new Operations({
      id: receiver._id,
      description: `–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç ${sender.username}`,
      amount: transfer.amount,
      currency: transfer.currency,
      type: 'transfer',
      createdAt: new Date(),
    });

    await Promise.all([senderOperation.save(), receiverOperation.save()]);

    await ctx.reply(`‚úÖ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä ${transferId} —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!`);
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—É:", error);
    await ctx.reply("üö´ –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç");
    await ctx.answerCbQuery();
  }
});

// –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—É
bot.action(/reject_transfer_(.+)/, async (ctx) => {
  const transferId = ctx.match[1];
  try {
    const transfer = await Transfer.findById(transferId);
    if (!transfer) {
      await ctx.reply("–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return ctx.answerCbQuery();
    }

    if (transfer.status !== "pending") {
      await ctx.reply(`–¢—Ä–∞–Ω—Å—Ñ–µ—Ä ${transferId} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.`);
      return ctx.answerCbQuery();
    }

    transfer.status = "rejected";
    await transfer.save();

    await ctx.reply(`‚ùå –¢—Ä–∞–Ω—Å—Ñ–µ—Ä ${transferId} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!`);
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—É:", error);
    await ctx.reply("üö´ –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç");
    await ctx.answerCbQuery();
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è"
bot.action("getdeposits", async (ctx) => {
  try {
    const deposits = await Deposit.find({ status: "pending" }).sort({ createdAt: -1 });
    if (!deposits.length) {
      await ctx.reply("–î–µ–ø–æ–∑–∏—Ç–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'pending' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
      return ctx.answerCbQuery();
    }

    for (const deposit of deposits) {
      const sender = await User.findById(deposit.id);
      const depositInfo = `
ID: ${deposit._id}
Email: ${sender.email}
–í–∞–ª—é—Ç–∞: ${deposit.currency}
–°—É–º–∞: ${deposit.amount} USD
–°—Ç–∞—Ç—É—Å: ${deposit.status}
–î–∞—Ç–∞: ${new Date(deposit.createdAt).toLocaleString()}
      `;

      await ctx.reply(depositInfo, {
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", `confirm_${deposit._id}`), // –ó–º—ñ–Ω–∏–ª–∏ deposit.id –Ω–∞ deposit._id
            Markup.button.callback("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", `reject_${deposit._id}`),   // –ó–º—ñ–Ω–∏–ª–∏ deposit.id –Ω–∞ deposit._id
          ],
        ]).reply_markup,
      });
    }

    await ctx.answerCbQuery();
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤:", error);
    await ctx.reply("üö´ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É");
    await ctx.answerCbQuery();
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è"
bot.action("getwithdrawals", async (ctx) => {
  try {
    const withdrawals = await Withdrawal.find({ status: "pending" }).sort({ createdAt: -1 });
    if (!withdrawals.length) {
      await ctx.reply("–í–∏–≤–µ–¥–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'pending' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
      return ctx.answerCbQuery();
    }

    for (const withdrawal of withdrawals) {
      const sender = await User.findById(withdrawal.id);
      const withdrawalInfo = `
ID: ${withdrawal._id}
Email: ${sender.email}
–í–∞–ª—é—Ç–∞: ${withdrawal.currency}
–°—É–º–∞: ${withdrawal.amount} USD
–°—Ç–∞—Ç—É—Å: ${withdrawal.status}
–ì–∞–º–∞–Ω–µ—Ü—å: ${withdrawal.waletId}
–î–∞—Ç–∞: ${new Date(withdrawal.createdAt).toLocaleString()}
      `;

      await ctx.reply(withdrawalInfo, {
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", `confirm_withdrawal_${withdrawal._id}`),
            Markup.button.callback("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", `reject_withdrawal_${withdrawal._id}`),
          ],
        ]).reply_markup,
      });
    }

    await ctx.answerCbQuery();
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–∏–≤–µ–¥–µ–Ω—å:", error);
    await ctx.reply("üö´ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É");
    await ctx.answerCbQuery();
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏" –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω—å
bot.action(/confirm_withdrawal_(.+)/, async (ctx) => {
  const withdrawalId = ctx.match[1];
  try {
    const withdrawal = await Withdrawal.findById(withdrawalId);
    if (!withdrawal) {
      await ctx.reply("–í–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return ctx.answerCbQuery();
    }

    if (withdrawal.status !== "pending") {
      await ctx.reply(`–í–∏–≤–µ–¥–µ–Ω–Ω—è ${withdrawalId} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.`);
      return ctx.answerCbQuery();
    }

    // –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ withdrawal.id (–ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Ü–µ userId)
    const user = await User.findById(withdrawal.id);
    if (!user) {
      await ctx.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return ctx.answerCbQuery();
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ balance.USDT, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    if (!user.balance || typeof user.balance !== "object") {
      user.balance = new Map();
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ USDT –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ
    const currentBalance = user.balance.get("USDT") || 0;
    if (currentBalance < withdrawal.amount) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ. –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance} USDT, –ø–æ—Ç—Ä—ñ–±–Ω–æ: ${withdrawal.amount} USDT`);
      return ctx.answerCbQuery();
    }

    // –ó–Ω—ñ–º–∞—î–º–æ –∫–æ—à—Ç–∏ –∑ –±–∞–ª–∞–Ω—Å—É
    user.balance.set("USDT", currentBalance - withdrawal.amount);
    await user.save();

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤–∏–≤–µ–¥–µ–Ω–Ω—è
    withdrawal.status = "confirmed";
    await withdrawal.save();

    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
    const newOperation = new Operations({
      id: withdrawal.id, // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      description: "–°–Ω—è—Ç–∏–µ –±–∞–ª–∞–Ω—Å–∞",
      amount: withdrawal.amount,
      currency: "USDT", // –ó–∞–≤–∂–¥–∏ USDT
      type: "withdrawal",
      createdAt: new Date(),
    });
    await newOperation.save();

    await ctx.reply(`‚úÖ –í–∏–≤–µ–¥–µ–Ω–Ω—è ${withdrawalId} —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!`);
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è:", error);
    await ctx.reply("üö´ –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç");
    await ctx.answerCbQuery();
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ñ–¥—Ö–∏–ª–∏—Ç–∏" –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω—å
bot.action(/reject_withdrawal_(.+)/, async (ctx) => {
  const withdrawalId = ctx.match[1];
  try {
    const withdrawal = await Withdrawal.findById(withdrawalId);
    if (!withdrawal) {
      await ctx.reply("–í–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return ctx.answerCbQuery();
    }

    if (withdrawal.status !== "pending") {
      await ctx.reply(`–í–∏–≤–µ–¥–µ–Ω–Ω—è ${withdrawalId} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.`);
      return ctx.answerCbQuery();
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤–∏–≤–µ–¥–µ–Ω–Ω—è
    withdrawal.status = "rejected";
    await withdrawal.save();

    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
    const newOperation = new Operations({
      id: withdrawal.id, // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      description: "–°–Ω—è—Ç–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
      amount: withdrawal.amount,
      currency: "USDT", // –ó–∞–≤–∂–¥–∏ USDT
      type: "withdrawal",
      createdAt: new Date(),
    });
    await newOperation.save();

    await ctx.reply(`‚ùå –í–∏–≤–µ–¥–µ–Ω–Ω—è ${withdrawalId} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!\n–ü—Ä–∏—á–∏–Ω–∞: –∑–∞–ø–∏—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`);
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è:", error);
    await ctx.reply("üö´ –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç");
    await ctx.answerCbQuery();
  }
});

bot.action(/confirm_(.+)/, async (ctx) => {
  const depositId = ctx.match[1];
  try {
    const deposit = await Deposit.findById(depositId);
    if (!deposit) {
      await ctx.reply("–î–µ–ø–æ–∑–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return ctx.answerCbQuery();
    }

    if (deposit.status !== "pending") {
      await ctx.reply(`–î–µ–ø–æ–∑–∏—Ç ${depositId} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.`);
      return ctx.answerCbQuery();
    }

    // –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ deposit.id (–ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Ü–µ userId)
    const user = await User.findById(deposit.id);
    if (!user) {
      await ctx.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return ctx.answerCbQuery();
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ balance.USDT, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    if (!user.balance || typeof user.balance !== "object") {
      user.balance = new Map(); // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —è–∫ Map, —è–∫—â–æ balance —â–µ –Ω–µ —ñ—Å–Ω—É—î
    }
    // –î–æ–¥–∞—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å —É USDT
    user.balance.set("USDT", (user.balance.get("USDT") || 0) + deposit.amount);
    await user.save();

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç—É
    deposit.status = "confirmed";
    await deposit.save();

    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
    const newOperation = new Operations({
      id: deposit.id, // ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      description: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
      amount: deposit.amount,
      currency: "USDT", // –ó–∞–≤–∂–¥–∏ USDT
      type: "deposit",
      createdAt: new Date(),
    });
    await newOperation.save();

    await ctx.reply(`‚úÖ –î–µ–ø–æ–∑–∏—Ç ${depositId} —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!`);
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:", error);
    await ctx.reply("üö´ –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç");
    await ctx.answerCbQuery();
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏" –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç—ñ–≤
bot.action(/reject_(.+)/, async (ctx) => {
  const depositId = ctx.match[1]; // –ó–º—ñ–Ω–∏–ª–∏ transactionId –Ω–∞ depositId –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
  try {
    const deposit = await Deposit.findById(depositId); // –ó–º—ñ–Ω–∏–ª–∏ findOne({ id: ... }) –Ω–∞ findById
    if (!deposit) {
      await ctx.reply("–î–µ–ø–æ–∑–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return ctx.answerCbQuery();
    }

    if (deposit.status !== "pending") {
      await ctx.reply(`–î–µ–ø–æ–∑–∏—Ç ${depositId} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.`);
      return ctx.answerCbQuery();
    }

    deposit.status = "rejected";
    await deposit.save();

    const newOperation = new Operations({
      id: deposit.id, // –ó–º—ñ–Ω–∏–ª–∏ deposit.userId –Ω–∞ deposit.id, —è–∫—â–æ id ‚Äî —Ü–µ userId
      description: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
      amount: deposit.amount,
      currency: deposit.currency || "USDT",
      type: "deposit",
      createdAt: new Date(),
    });
    await newOperation.save();

    await ctx.reply(
      `‚ùå –î–µ–ø–æ–∑–∏—Ç ${depositId} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!\n` +
      `–ü—Ä–∏—á–∏–Ω–∞: –∑–∞–ø–∏—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`
    );

    await ctx.answerCbQuery();
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è:", error);
    await ctx.reply("üö´ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É");
    await ctx.answerCbQuery();
  }
});

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Next.js API
export async function POST(req: Request) {
  const body = await req.json();
  await bot.handleUpdate(body);
  return NextResponse.json({ status: "ok" });
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ (–≤–∏–∫–ª–∏–∫–∞—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑ —á–µ—Ä–µ–∑ GET)
export async function GET() {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const webhookUrl = `${process.env.VERCEL_URL}/api/telegram/webhook`;

    if (!botToken) {
      return NextResponse.json({ error: "Telegram bot token is missing" }, { status: 500 });
    }

    await bot.telegram.setWebhook(webhookUrl);
    return NextResponse.json({ success: true, message: "Webhook set successfully" });
  } catch (error) {
    console.error("Error setting webhook:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}