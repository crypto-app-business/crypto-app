import { Telegraf, Markup } from "telegraf";
import { NextResponse } from "next/server";
import Deposit from "@/models/Deposit";
import Withdrawal from "@/models/Withdrawal";
import User from "@/models/User";
import connectDB from "@/utils/connectDB";
import Operations from "@/models/Operations";

// –ó‚Äô—î–¥–Ω—É—î–º–æ—Å—è –∑ –±–∞–∑–æ—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É
connectDB().catch((err) => console.error("DB connection error:", err));

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || "");

bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
  ctx.reply("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.");
});

async function sendLongMessage(ctx, text) {
  const maxLength = 4096;
  for (let i = 0; i < text.length; i += maxLength) {
    await ctx.reply(text.substring(i, i + maxLength));
  }
}

// Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è chat ID
bot.use(async (ctx, next) => {
  const adminChatId = process.env.TELEGRAM_ADMIN_CHAT_ID;
  console.log("Chat ID:", ctx.chat?.id);
  console.log("Chat ID admin:", adminChatId);
  next();
});

// –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏
bot.command("start", async (ctx) => {
  await ctx.reply(
    "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
    Markup.inlineKeyboard([
      [Markup.button.callback("–û—Ç—Ä–∏–º–∞—Ç–∏ —é–∑–µ—Ä—ñ–≤", "getusers")],
      [Markup.button.callback("–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", "getdeposits")],
      [Markup.button.callback("–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è", "getwithdrawals")],
    ])
  );
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∏–º–∞—Ç–∏ —é–∑–µ—Ä—ñ–≤"
bot.action("getusers", async (ctx) => {
  try {
    const users = await User.find().sort({ createdAt: -1 });
    if (!users.length) {
      await ctx.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
      return;
    }

    let response = "–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n\n";
    users.forEach((user, index) => {
      response += `${index + 1}. –Ü–º‚Äô—è: ${user.firstName} ${user.lastName}\n`;
      response += `   –ù–∏–∫–Ω–µ–π–º: ${user.username}\n`;
      response += `   Email: ${user.email}\n`;
      response += `   –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n`;
      response += `   –¢–µ–ª–µ–≥—Ä–∞–º: ${user.telegramId || "-"} \n`;
      response += `   –ë–∞–ª–∞–Ω—Å: ${Object.entries(user.balance || {}).map(([curr, amt]) => `${curr}: ${amt}`).join(", ")}\n\n`;
    });

    await sendLongMessage(ctx, response);
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("Error getting users:", error);
    await ctx.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.");
    await ctx.answerCbQuery();
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è"
bot.action("getdeposits", async (ctx) => {
  try {
    const deposits = await Deposit.find({ status: "pending" }).sort({ createdAt: -1 });
    if (!deposits.length) {
      await ctx.reply("–î–µ–ø–æ–∑–∏—Ç–∏ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'pending' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
      return ctx.answerCbQuery();
    }

    for (const deposit of deposits) {
      const depositInfo = `
ID: ${deposit._id}  // –ó–º—ñ–Ω–∏–ª–∏ deposit.id –Ω–∞ deposit._id –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
–í–∞–ª—é—Ç–∞: ${deposit.currency}
–°—É–º–∞: ${deposit.amount} USD
–°—Ç–∞—Ç—É—Å: ${deposit.status}
–î–∞—Ç–∞: ${new Date(deposit.createdAt).toLocaleString()}
      `;

      await ctx.reply(depositInfo, {
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.button.callback("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", `confirm_${deposit._id}`), // –ó–º—ñ–Ω–∏–ª–∏ deposit.id –Ω–∞ deposit._id
            Markup.button.callback("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", `reject_${deposit._id}`),   // –ó–º—ñ–Ω–∏–ª–∏ deposit.id –Ω–∞ deposit._id
          ],
        ]).reply_markup,
      });
    }

    await ctx.answerCbQuery();
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–µ–ø–æ–∑–∏—Ç—ñ–≤:", error);
    await ctx.reply("üö´ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É");
    await ctx.answerCbQuery();
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—è"
bot.action("getwithdrawals", async (ctx) => {
  try {
    const withdrawals = await Withdrawal.find().sort({ createdAt: -1 });
    if (!withdrawals.length) {
      await ctx.reply("–í–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
      return;
    }

    let response = "–°–ø–∏—Å–æ–∫ –≤–∏–≤–µ–¥–µ–Ω—å:\n\n";
    withdrawals.forEach((withdrawal, index) => {
      response += `${index + 1}. ID: ${withdrawal.id}\n`;
      response += `   –í–∞–ª—é—Ç–∞: ${withdrawal.currency}\n`;
      response += `   –°—É–º–∞: ${withdrawal.amount} USD\n`;
      response += `   –°—Ç–∞—Ç—É—Å: ${withdrawal.status}\n`;
      response += `   –ì–∞–º–∞–Ω–µ—Ü—å: ${withdrawal.waletId}\n`;
      response += `   –î–∞—Ç–∞: ${new Date(withdrawal.createdAt).toLocaleString()}\n\n`;
    });

    await sendLongMessage(ctx, response);
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("Error getting withdrawals:", error);
    await ctx.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –≤–∏–≤–µ–¥–µ–Ω—å.");
    await ctx.answerCbQuery();
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏" –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç—ñ–≤
bot.action(/confirm_(.+)/, async (ctx) => {
  const depositId = ctx.match[1];
  try {
    const deposit = await Deposit.findById(depositId); // –ó–∞–ª–∏—à–∞—î–º–æ findById, –±–æ —Ç–µ–ø–µ—Ä depositId ‚Äî —Ü–µ _id
    if (!deposit) {
      await ctx.reply("–î–µ–ø–æ–∑–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return ctx.answerCbQuery();
    }

    if (deposit.status !== "pending") {
      await ctx.reply(`–î–µ–ø–æ–∑–∏—Ç ${depositId} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.`);
      return ctx.answerCbQuery();
    }

    const user = await User.findById(deposit.id); // –ó–º—ñ–Ω–∏–ª–∏ deposit.userId –Ω–∞ deposit.id, —è–∫—â–æ id ‚Äî —Ü–µ userId
    if (user) {
      user.balance.set(deposit.USDT, (user.balance.get(deposit.USDT) || 0) + deposit.amount); // –ó–º—ñ–Ω–∏–ª–∏ USDT –Ω–∞ currency
      await user.save();
    }

    deposit.status = "confirmed";
    await deposit.save();

    await ctx.reply(`‚úÖ –î–µ–ø–æ–∑–∏—Ç ${depositId} —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!`);
    await ctx.answerCbQuery();
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:", error);
    await ctx.reply("üö´ –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç");
    await ctx.answerCbQuery();
  }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏" –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç—ñ–≤
bot.action(/reject_(.+)/, async (ctx) => {
  const depositId = ctx.match[1]; // –ó–º—ñ–Ω–∏–ª–∏ transactionId –Ω–∞ depositId –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
  try {
    const deposit = await Deposit.findById(depositId); // –ó–º—ñ–Ω–∏–ª–∏ findOne({ id: ... }) –Ω–∞ findById
    if (!deposit) {
      await ctx.reply("–î–µ–ø–æ–∑–∏—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
      return ctx.answerCbQuery();
    }

    if (deposit.status !== "pending") {
      await ctx.reply(`–î–µ–ø–æ–∑–∏—Ç ${depositId} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.`);
      return ctx.answerCbQuery();
    }

    deposit.status = "rejected";
    await deposit.save();

    const newOperation = new Operations({
      id: deposit.id, // –ó–º—ñ–Ω–∏–ª–∏ deposit.userId –Ω–∞ deposit.id, —è–∫—â–æ id ‚Äî —Ü–µ userId
      description: "–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ",
      amount: deposit.amount,
      currency: deposit.currency || "USDT",
      type: "deposit",
      createdAt: new Date(),
    });
    await newOperation.save();

    await ctx.reply(
      `‚ùå –î–µ–ø–æ–∑–∏—Ç ${depositId} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!\n` +
      `–ü—Ä–∏—á–∏–Ω–∞: –∑–∞–ø–∏—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`
    );

    await ctx.answerCbQuery();
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è:", error);
    await ctx.reply("üö´ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É");
    await ctx.answerCbQuery();
  }
});

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Next.js API
export async function POST(req: Request) {
  const body = await req.json();
  await bot.handleUpdate(body);
  return NextResponse.json({ status: "ok" });
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ (–≤–∏–∫–ª–∏–∫–∞—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑ —á–µ—Ä–µ–∑ GET)
export async function GET() {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const webhookUrl = `${process.env.VERCEL_URL}/api/telegram/webhook`;

    if (!botToken) {
      return NextResponse.json({ error: "Telegram bot token is missing" }, { status: 500 });
    }

    await bot.telegram.setWebhook(webhookUrl);
    return NextResponse.json({ success: true, message: "Webhook set successfully" });
  } catch (error) {
    console.error("Error setting webhook:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}